// 写一个交换函数，学习值传递
#include<iostream>
using namespace std;
//表示该函数没有返回值​​
//你的 between 函数执行完操作后，​​不会返回任何数据​​（不像 int add() 会返回一个整数）。
//你的 between 函数只需要 ​​交换两个变量的值并打印结果​​，不需要返回任何数据，所以用 void 是合适的。
void between(int a, int b){
    cout<<"当前a的值为："<<a<<endl;
    cout<<"当前b的值为："<<b<<endl;

    int temp = a;
    a = b;
    b = temp;

    cout<<"交换完之后的a为："<<a<<endl;
    cout<<"交换完之后的b为："<<b<<endl;

}

int main(){
    int a = 88;
    int b = 99;
    between(a, b);

    cout<<"主函数的a为："<< a <<endl;
    cout<<"朱函数的b为："<< b <<endl;
    // 虽然你的 swap 函数内部交换了 num1 和 num2 的值，但由于 ​​参数是值传递​，函数外部的 a 和 b ​​并不会真正交换​​。这是因为值传递会创建副本，修改的是副本，不影响原始变量。
    return 0;
}

// 笔记
// 所谓值传递，就是函数调用时实参将数值传入给形参
// 值传递时，如果形参发生，并不会影响实参

/*
值传递不会改变实参，只是将实参的值复制给形参，函数内部修改是副本，而不是原始数据
底层原理就是
1. 调用函数的时候，系统将形参分配到新的内存空间（栈内存）将实参的值 复制到 形参的空间中。
2. 函数执行期间，所有的操作都作用在形参的副本上，而不是实参自己的原始数据
3. 函数返回后，行参的内存空间会自动释放，副本消失，原始数据不变
*/